export	LIBFXCG_INC	:=	/Applications/CASIO/PrizmSDK/include
export	UTILS_INC	:=	/Applications/CASIO/PrizmSDK/utils
export	LIBFXCG_LIB	:=	/Applications/CASIO/PrizmSDK/lib

MACHDEP = -mb -m4a-nofpu -mhitachi -nostdlib

#---------------------------------------------------------------------------------
# path to tools 
#---------------------------------------------------------------------------------
export PATH	:=	/Applications/CASIO/PrizmSDK/bin:$(PATH)

#---------------------------------------------------------------------------------
# the prefix on the compiler executables
#---------------------------------------------------------------------------------
PREFIX	:=	/Applications/CASIO/PrizmSDK/bin/sh3eb-elf-

export AS	:=	$(PREFIX)as
export CC	:=	$(PREFIX)gcc
export CXX	:=	$(PREFIX)g++
export AR	:=	$(PREFIX)gcc-ar
export OBJCOPY	:=	$(PREFIX)objcopy
export MKG3A := mkg3a

ifeq ($(OS),Windows_NT)
define rm
  del /S /Q $(foreach deleteFile,$(1),$(subst /,\,$(deleteFile)))
endef
define rmdir
  rmdir /S /Q $(foreach deleteDir,$(1),$(subst /,\,$(deleteDir)))
endef
else
define rm
  rm -f "$(1)"
endef
define rmdir
  rm -rf "$(1)"
endef
endif

#---------------------------------------------------------------------------------
# This is from devkitpro's MSVC stuff for makings errors cleaner, requires sed
#---------------------------------------------------------------------------------
#ISVC=$(or $(VCBUILDHELPER_COMMAND),$(MSBUILDEXTENSIONSPATH32),$(MSBUILDEXTENSIONSPATH))
#
#ifneq (,$(ISVC))
#	ERROR_FILTER	:=	2>&1 | sed -e 's/\(.[a-zA-Z]\+\):\([0-9]\+\):/\1(\2):/g'
#endif

#---------------------------------------------------------------------------------
%.a:
#---------------------------------------------------------------------------------
	$(call rm,$@)
	$(AR) -rc $@ $^

#---------------------------------------------------------------------------------
%.o: %.cpp
	$(CXX) -MMD -MP -MF $(DEPSDIR)/$*.d -DTARGET_PRIZM=1 $(CXXFLAGS) -c $< -o $@ $(ERROR_FILTER)
	
#---------------------------------------------------------------------------------
%.o: %.c
	$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d -DTARGET_PRIZM=1 $(CFLAGS) -c $< -o $@ $(ERROR_FILTER)

#---------------------------------------------------------------------------------
%.o: %.m
	$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d $(OBJCFLAGS) -c $< -o $@ $(ERROR_FILTER)

#---------------------------------------------------------------------------------
%.o: %.s
	$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d -x assembler-with-cpp $(ASFLAGS) -c $< -o $@ $(ERROR_FILTER)

#---------------------------------------------------------------------------------
%.o: %.S
	$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d -x assembler-with-cpp $(ASFLAGS) -c $< -o $@ $(ERROR_FILTER)
    
#---------------------------------------------------------------------------------
%.g3a: %.bin
	$(MKG3A) $(MKG3AFLAGS) $< $@
    
%.bin:
	$(LD)  $^ $(LDFLAGS) $(LIBPATHS) $(LIBS) -o $@

#---------------------------------------------------------------------------------
# canned command sequence for binary data
#---------------------------------------------------------------------------------
define bin2o
	bin2s -a 32 $< | $(AS) -o $(@)
	echo "extern const u8" `(echo $(<F) | sed -e 's/^\([0-9]\)/_\1/' | tr . _)`"_end[];" > `(echo $(<F) | tr . _)`.h
	echo "extern const u8" `(echo $(<F) | sed -e 's/^\([0-9]\)/_\1/' | tr . _)`"[];" >> `(echo $(<F) | tr . _)`.h
	echo "extern const u32" `(echo $(<F) | sed -e 's/^\([0-9]\)/_\1/' | tr . _)`_size";" >> `(echo $(<F) | tr . _)`.h
endef
